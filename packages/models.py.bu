import urllib
from xml.etree import ElementTree
from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.core.urlresolvers import reverse

from packages.functions import *


# Bookstore model
class Bookstore(models.Model):
    owner = models.ForeignKey(User)
    store_name = models.CharField(max_length=100)
    description = models.CharField(max_length=100)
    access_key = models.CharField(max_length=20)

    def get_absolute_url(self):
        return reverse('packages.views.mybookstore_detail', 
                       args=(self.pk,))

    def __unicode__(self):
        return unicode(self.store_name)

    # populate book data from ISBNDB.com
    def set_data(self, book):
        if not is_valid_isbn(book.isbn):
            return False
        else:
            dom = get_dom(self.access_key, "details", "isbn", book.isbn)
            if not dom:
                return False
            else:
                for item in dom.getiterator('Title'):
                    book.title = item.text
                for item in dom.getiterator('TitleLong'):
                    if item.text:
                        book.title_long = item.text
                    else:
                        book.title_long = ""
                for item in dom.getiterator('AuthorsText'):
                    if item.text:
                        book.authors = item.text
                    else:
                        book.authors = ""
                for item in dom.getiterator('PublisherText'):
                    if item.text:
                        book.publisher = item.text
                    else:
                        book.publisher = ""
                dom = get_dom(self.access_key, "texts", "isbn", book.isbn)
                if dom:
                    for item in dom.getiterator('Summary'):
                        if item.text:
                            book.summary = item.text
                        else:
                            book.summary = ""
                    for item in dom.getiterator('Notes'):
                        if item.text:
                            book.notes = item.text
                        else:
                            book.notes = ""
                return True

    # populate price data from ISBNDB.com
    def isbn_db(self, book):
        tmp_dprice = []
        dom = get_dom(self.access_key, "prices", "isbn", book.isbn)
        if dom:
            for pr in dom.getiterator('Price'):
                tmp_dprice.append({'store': pr.get('store_id'), 
                                   'price': '{:.2f}'.format(float(pr.get('price'))),
                                   'currency_code': pr.get('currency_code'), 
                                   'is_new': pr.get('is_new'),
                                   'is_in_stock': pr.get('is_in_stock'), 
                                   'is_historic': pr.get('is_historic'),
                                   })
        book.dprice = tmp_dprice
        usd_list = []
        for dpr in book.dprice:
            if dpr.get('currency_code') == "USD":
                usd_list.append(float(dpr.get('price')))
        avg_dprice = float(sum(usd_list) / len(usd_list))
        book.dprice.append({'store': "mean", 'price': '{:.2f}'.format(avg_dprice),})



# Book model
class Book(models.Model):
    owner = models.ForeignKey(User, blank=True)
    bookstore = models.ForeignKey(Bookstore)
    date_added = models.DateTimeField('date added', blank=True)
    # Basic data fields
    title = models.CharField(max_length=100, blank=True)
    title_long = models.CharField(max_length=200, blank=True)
    isbn = models.CharField(max_length=13)
    authors = models.CharField(max_length=100, blank=True)
    publisher = models.CharField(max_length=100, blank=True)
    # Detail fields
    summary = models.TextField(max_length=500, blank=True)
    notes = models.TextField(max_length=500, blank=True)
    # Price fields
    myprice = models.FloatField('my price', blank=True)
    dprice = []
    # Primary filter property
    SHELF_CHOICES = (
        ('public', 'Public'),
        ('lookup', 'Lookup'),
        ('trash', 'Trash'),
    )
    myshelf = models.CharField(max_length=12,
                               choices=SHELF_CHOICES,
                               default='public')

    def get_absolute_url(self):
        return reverse('packages.views.mybook_detail', args=(self.bookstore.id, self.pk,))

    def __unicode__(self):
        return unicode(self.isbn)

